# Azure DevOps CI/CD Pipeline - Four Hands QA Automation
# Playwright + Pytest + BrowserStack + Allure Reports + Jira/Zephyr Integration
# Triggers on: Push to main/develop branches

trigger:
  branches:
    include:
      - main
      - develop
      - release/*
  paths:
    exclude:
      - README.md
      - docs/*

pr:
  branches:
    include:
      - main
      - develop
  paths:
    exclude:
      - README.md
      - docs/*

variables:
  - group: QA-Automation-Config
  - group: Jira-Zephyr-Config  # New variable group for Jira/Zephyr credentials
  - name: pythonVersion
    value: '3.11'
  - name: nodeVersion
    value: '18.x'
  - name: testCycleKey
    value: ''  # Will be set dynamically

stages:
  - stage: Test
    displayName: 'Run Tests'
    jobs:
      - job: Setup_Jira_Test_Cycle
        displayName: 'Setup Jira Test Cycle'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          - task: UsePythonVersion@0
            displayName: 'Set Python Version'
            inputs:
              versionSpec: '$(pythonVersion)'
              addToPath: true
          
          - script: |
              python -m pip install --upgrade pip
              pip install requests python-dotenv
            displayName: 'Install Dependencies'
          
          - script: |
              python utils/jira_integration.py create-cycle \
                --name "Automated Test Run - Build $(Build.BuildNumber)" \
                --project "$(JIRA_PROJECT_KEY)" \
                --version "$(JIRA_VERSION)"
            displayName: 'Create Zephyr Test Cycle'
            env:
              JIRA_BASE_URL: $(JIRA_BASE_URL)
              JIRA_EMAIL: $(JIRA_EMAIL)
              JIRA_API_TOKEN: $(JIRA_API_TOKEN)
              JIRA_PROJECT_KEY: $(JIRA_PROJECT_KEY)
            name: CreateCycle
          
          - powershell: |
              $testCycleKey = Get-Content -Path "test_cycle_key.txt"
              Write-Host "##vso[task.setvariable variable=testCycleKey;isOutput=true]$testCycleKey"
              Write-Host "Test Cycle Key: $testCycleKey"
            displayName: 'Set Test Cycle Key Variable'
            name: SetCycleKey

      - job: Smoke_Tests
        displayName: 'Smoke Tests (Local Agent)'
        dependsOn: Setup_Jira_Test_Cycle
        pool:
          vmImage: 'ubuntu-latest'
        variables:
          testCycleKey: $[ dependencies.Setup_Jira_Test_Cycle.outputs['SetCycleKey.testCycleKey'] ]
        
        steps:
          - task: UsePythonVersion@0
            displayName: 'Set Python Version'
            inputs:
              versionSpec: '$(pythonVersion)'
              addToPath: true
          
          - script: |
              python -m pip install --upgrade pip
              pip install -r requirements.txt
            displayName: 'Install Dependencies'
          
          - script: |
              playwright install chromium
            displayName: 'Install Playwright Browsers'
          
          - script: |
              export D365_BASE_URL="$(D365-BASE-URL)"
              export D365_USERNAME="$(D365-USERNAME)"
              export D365_PASSWORD="$(D365-PASSWORD)"
              export FH_BASE_URL="$(FH-BASE-URL)"
              export FH_USERNAME="$(FH-USERNAME)"
              export FH_PASSWORD="$(FH-PASSWORD)"
              export HEADED=$(HEADED)
              export TIMEOUT=$(TIMEOUT)
              export JIRA_BASE_URL="$(JIRA_BASE_URL)"
              export JIRA_EMAIL="$(JIRA_EMAIL)"
              export JIRA_API_TOKEN="$(JIRA_API_TOKEN)"
              export JIRA_PROJECT_KEY="$(JIRA_PROJECT_KEY)"
              export ZEPHYR_CYCLE_KEY="$(testCycleKey)"
              
              pytest tests/ -m smoke -v \
                --alluredir=reports/allure-results \
                --junitxml=reports/junit/smoke-results.xml \
                --maxfail=5 \
                --tb=short
            displayName: 'Run Smoke Tests'
            continueOnError: false
          
          - script: |
              python utils/jira_integration.py update-results \
                --cycle "$(testCycleKey)" \
                --results "reports/junit/smoke-results.xml" \
                --test-type "smoke"
            displayName: 'Update Jira Test Results'
            condition: always()
            env:
              JIRA_BASE_URL: $(JIRA_BASE_URL)
              JIRA_EMAIL: $(JIRA_EMAIL)
              JIRA_API_TOKEN: $(JIRA_API_TOKEN)
              JIRA_PROJECT_KEY: $(JIRA_PROJECT_KEY)
          
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: always()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'reports/junit/*.xml'
              testRunTitle: 'Smoke Tests - $(Build.BuildNumber)'
              failTaskOnFailedTests: true
          
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Allure Results'
            condition: always()
            inputs:
              PathtoPublish: 'reports/allure-results'
              ArtifactName: 'allure-results'
              publishLocation: 'Container'
          
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Screenshots'
            condition: failed()
            inputs:
              PathtoPublish: 'test-results'
              ArtifactName: 'test-results'
              publishLocation: 'Container'

      - job: E2E_Tests
        displayName: 'E2E Tests (Local Agent)'
        dependsOn: 
          - Setup_Jira_Test_Cycle
          - Smoke_Tests
        condition: succeeded()
        pool:
          vmImage: 'ubuntu-latest'
        variables:
          testCycleKey: $[ dependencies.Setup_Jira_Test_Cycle.outputs['SetCycleKey.testCycleKey'] ]
        
        steps:
          - task: UsePythonVersion@0
            displayName: 'Set Python Version'
            inputs:
              versionSpec: '$(pythonVersion)'
              addToPath: true
          
          - script: |
              python -m pip install --upgrade pip
              pip install -r requirements.txt
            displayName: 'Install Dependencies'
          
          - script: |
              playwright install chromium
            displayName: 'Install Playwright Browsers'
          
          - script: |
              export D365_BASE_URL="$(D365-BASE-URL)"
              export D365_USERNAME="$(D365-USERNAME)"
              export D365_PASSWORD="$(D365-PASSWORD)"
              export FH_BASE_URL="$(FH-BASE-URL)"
              export FH_USERNAME="$(FH-USERNAME)"
              export FH_PASSWORD="$(FH-PASSWORD)"
              export HEADED=$(HEADED)
              export TIMEOUT=$(TIMEOUT)
              export JIRA_BASE_URL="$(JIRA_BASE_URL)"
              export JIRA_EMAIL="$(JIRA_EMAIL)"
              export JIRA_API_TOKEN="$(JIRA_API_TOKEN)"
              export JIRA_PROJECT_KEY="$(JIRA_PROJECT_KEY)"
              export ZEPHYR_CYCLE_KEY="$(testCycleKey)"
              
              pytest tests/ -m "e2e" -v \
                --alluredir=reports/allure-results \
                --junitxml=reports/junit/e2e-results.xml \
                --tb=short \
                -n auto
            displayName: 'Run E2E Tests (Parallel)'
            continueOnError: true
          
          - script: |
              python utils/jira_integration.py update-results \
                --cycle "$(testCycleKey)" \
                --results "reports/junit/e2e-results.xml" \
                --test-type "e2e"
            displayName: 'Update Jira Test Results'
            condition: always()
            env:
              JIRA_BASE_URL: $(JIRA_BASE_URL)
              JIRA_EMAIL: $(JIRA_EMAIL)
              JIRA_API_TOKEN: $(JIRA_API_TOKEN)
              JIRA_PROJECT_KEY: $(JIRA_PROJECT_KEY)
          
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: always()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'reports/junit/*.xml'
              testRunTitle: 'E2E Tests - $(Build.BuildNumber)'
          
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Allure Results'
            condition: always()
            inputs:
              PathtoPublish: 'reports/allure-results'
              ArtifactName: 'allure-results-e2e'
              publishLocation: 'Container'

  - stage: Report
    displayName: 'Generate Reports & Update Jira'
    dependsOn: Test
    condition: always()
    jobs:
      - job: Allure_Report
        displayName: 'Generate & Publish Allure Report'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          - task: DownloadBuildArtifacts@1
            displayName: 'Download Allure Results'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'allure-results'
              downloadPath: 'reports'
          
          - task: NodeTool@0
            displayName: 'Install Node.js'
            inputs:
              versionSpec: '$(nodeVersion)'
          
          - script: |
              npm install -g allure-commandline
              allure generate reports/allure-results -o reports/allure-report --clean
            displayName: 'Generate Allure Report'
          
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Allure Report'
            inputs:
              PathtoPublish: 'reports/allure-report'
              ArtifactName: 'allure-report'
              publishLocation: 'Container'
          
          - script: |
              echo "Allure Report URL: https://dev.azure.com/nbhandari0887/$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=artifacts"
            displayName: 'Print Report URL'

      - job: Update_Jira_Summary
        displayName: 'Update Jira Test Cycle Summary'
        dependsOn: Allure_Report
        condition: always()
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          - task: UsePythonVersion@0
            displayName: 'Set Python Version'
            inputs:
              versionSpec: '$(pythonVersion)'
              addToPath: true
          
          - script: |
              python -m pip install --upgrade pip
              pip install requests python-dotenv
            displayName: 'Install Dependencies'
          
          - task: DownloadBuildArtifacts@1
            displayName: 'Download Test Results'
            inputs:
              buildType: 'current'
              downloadType: 'specific'
          
          - script: |
              python utils/jira_integration.py finalize-cycle \
                --cycle "$(testCycleKey)" \
                --build "$(Build.BuildNumber)" \
                --build-url "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"
            displayName: 'Finalize Jira Test Cycle'
            env:
              JIRA_BASE_URL: $(JIRA_BASE_URL)
              JIRA_EMAIL: $(JIRA_EMAIL)
              JIRA_API_TOKEN: $(JIRA_API_TOKEN)
              JIRA_PROJECT_KEY: $(JIRA_PROJECT_KEY)
          
          - script: |
              python utils/jira_integration.py create-defects \
                --cycle "$(testCycleKey)" \
                --build "$(Build.BuildNumber)"
            displayName: 'Create Jira Defects for Failures'
            condition: failed()
            env:
              JIRA_BASE_URL: $(JIRA_BASE_URL)
              JIRA_EMAIL: $(JIRA_EMAIL)
              JIRA_API_TOKEN: $(JIRA_API_TOKEN)
              JIRA_PROJECT_KEY: $(JIRA_PROJECT_KEY)
